{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport devWarning from '../../_util/devWarning'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n    preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n    selectedRowKeys = _ref.selectedRowKeys,\n    getCheckboxProps = _ref.getCheckboxProps,\n    onSelectionChange = _ref.onChange,\n    onSelect = _ref.onSelect,\n    onSelectAll = _ref.onSelectAll,\n    onSelectInvert = _ref.onSelectInvert,\n    onSelectNone = _ref.onSelectNone,\n    onSelectMultiple = _ref.onSelectMultiple,\n    selectionColWidth = _ref.columnWidth,\n    selectionType = _ref.type,\n    selections = _ref.selections,\n    fixed = _ref.fixed,\n    customizeRenderCell = _ref.renderCell,\n    hideSelectAll = _ref.hideSelectAll,\n    _ref$checkStrictly = _ref.checkStrictly,\n    checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n  var prefixCls = config.prefixCls,\n    data = config.data,\n    pageData = config.pageData,\n    getRecordByKey = config.getRecordByKey,\n    getRowKey = config.getRowKey,\n    expandType = config.expandType,\n    childrenColumnName = config.childrenColumnName,\n    tableLocale = config.locale,\n    expandIconColumnIndex = config.expandIconColumnIndex,\n    getPopupContainer = config.getPopupContainer; // ======================== Caches ========================\n\n  var preserveRecordsRef = React.useRef(new Map()); // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || [], {\n      value: selectedRowKeys\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedSelectedKeys = _useMergedState2[0],\n    setMergedSelectedKeys = _useMergedState2[1];\n  var _useMemo = useMemo(function () {\n      return checkStrictly ? {\n        keyEntities: null\n      } : convertDataToEntities(data, {\n        externalGetKey: getRowKey,\n        childrenPropName: childrenColumnName\n      });\n    }, [data, getRowKey, checkStrictly, childrenColumnName]),\n    keyEntities = _useMemo.keyEntities; // Get flatten data\n\n  var flattedData = useMemo(function () {\n    return flattenData(pageData, childrenColumnName);\n  }, [pageData, childrenColumnName]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  var _useMemo2 = useMemo(function () {\n      if (checkStrictly) {\n        return [mergedSelectedKeys || [], []];\n      }\n      var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n      return [checkedKeys || [], halfCheckedKeys];\n    }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n    _useMemo3 = _slicedToArray(_useMemo2, 2),\n    derivedSelectedKeys = _useMemo3[0],\n    derivedHalfSelectedKeys = _useMemo3[1];\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastSelectedKey = _useState2[0],\n    setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys) {\n    var availableKeys;\n    var records;\n    if (preserveSelectedRowKeys) {\n      // Keep key if mark as preserveSelectedRowKeys\n      var newCache = new Map();\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        var record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n        return record;\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }));\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              if (keySet.has(key)) {\n                keySet[\"delete\"](key);\n              } else {\n                keySet.add(key);\n              }\n            });\n            var keys = Array.from(keySet);\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys);\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys([]);\n          }\n        };\n      }\n      return selection;\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Support selection\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    }; // ===================== Render =====================\n    // Title Cell\n\n    var title;\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n      if (mergedSelections) {\n        var menu = /*#__PURE__*/React.createElement(Menu, {\n          getPopupContainer: getPopupContainer\n        }, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n            text = selection.text,\n            onSelectionClick = selection.onSelect;\n          return /*#__PURE__*/React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n            }\n          }, text);\n        }));\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      var allDisabled = flattedData.every(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return checkboxProps.disabled;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled && !!flattedData.length && checkedCurrentAll,\n        indeterminate: !checkedCurrentAll && checkedCurrentSome,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n    var renderCell;\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(!(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) === 'boolean'), 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref2) {\n              var nativeEvent = _ref2.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                    halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              setLastSelectedKey(key);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n        node = _renderCell.node,\n        checked = _renderCell.checked;\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    }; // Columns\n\n    var selectionColumn = _defineProperty({\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {\n      var _columns = _toArray(columns),\n        expandColumn = _columns[0],\n        restColumns = _columns.slice(1);\n      var selectionFixed = fixed || getFixedType(restColumns[0]);\n      if (selectionFixed) {\n        expandColumn.fixed = selectionFixed;\n      }\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: selectionFixed\n      })].concat(_toConsumableArray(restColumns));\n    }\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"names":["_toArray","_defineProperty","_extends","_slicedToArray","_toConsumableArray","_typeof","React","useState","useCallback","useMemo","DownOutlined","convertDataToEntities","conductCheck","arrAdd","arrDel","INTERNAL_COL_DEFINE","useMergedState","Checkbox","Dropdown","Menu","Radio","devWarning","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","getFixedType","column","fixed","flattenData","data","childrenColumnName","list","forEach","record","push","concat","useSelection","rowSelection","config","_ref","preserveSelectedRowKeys","selectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","customizeRenderCell","renderCell","hideSelectAll","_ref$checkStrictly","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","expandIconColumnIndex","getPopupContainer","preserveRecordsRef","useRef","Map","_useMergedState","value","_useMergedState2","mergedSelectedKeys","setMergedSelectedKeys","_useMemo","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","key","checkboxProps","set","process","env","NODE_ENV","isCheckboxDisabled","r","_a","get","disabled","_useMemo2","_conductCheck","checkedKeys","halfCheckedKeys","_useMemo3","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","keys","slice","Set","derivedHalfSelectedKeySet","_useState","_useState2","lastSelectedKey","setLastSelectedKey","useEffect","setSelectedKeys","availableKeys","records","newCache","current","has","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","selectInvert","keySet","add","Array","from","selectNone","transformColumns","columns","recordKeys","filter","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","createElement","onSelectionClick","Item","onClick","className","overlay","allDisabled","checked","length","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref2","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","_checkedKeys","nextCheckedKeys","tempKeySet","renderSelectionCell","_renderCell","selectionColumn","width","columnTitle","render","_columns","expandColumn","restColumns","selectionFixed"],"sources":["C:/Users/Oğuz/Desktop/fullstack/src/frontend/node_modules/antd/es/table/hooks/useSelection.js"],"sourcesContent":["import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport devWarning from '../../_util/devWarning'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\n\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\n\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n      selectedRowKeys = _ref.selectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectNone = _ref.onSelectNone,\n      onSelectMultiple = _ref.onSelectMultiple,\n      selectionColWidth = _ref.columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed,\n      customizeRenderCell = _ref.renderCell,\n      hideSelectAll = _ref.hideSelectAll,\n      _ref$checkStrictly = _ref.checkStrictly,\n      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      expandIconColumnIndex = config.expandIconColumnIndex,\n      getPopupContainer = config.getPopupContainer; // ======================== Caches ========================\n\n  var preserveRecordsRef = React.useRef(new Map()); // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || [], {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1];\n\n  var _useMemo = useMemo(function () {\n    return checkStrictly ? {\n      keyEntities: null\n    } : convertDataToEntities(data, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName]),\n      keyEntities = _useMemo.keyEntities; // Get flatten data\n\n\n  var flattedData = useMemo(function () {\n    return flattenData(pageData, childrenColumnName);\n  }, [pageData, childrenColumnName]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastSelectedKey = _useState2[0],\n      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys) {\n    var availableKeys;\n    var records;\n\n    if (preserveSelectedRowKeys) {\n      // Keep key if mark as preserveSelectedRowKeys\n      var newCache = new Map();\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n        return record;\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }));\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n\n              if (keySet.has(key)) {\n                keySet[\"delete\"](key);\n              } else {\n                keySet.add(key);\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys);\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys([]);\n          }\n        };\n      }\n\n      return selection;\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Support selection\n\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = /*#__PURE__*/React.createElement(Menu, {\n          getPopupContainer: getPopupContainer\n        }, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n          return /*#__PURE__*/React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n            }\n          }, text);\n        }));\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabled = flattedData.every(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return checkboxProps.disabled;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled && !!flattedData.length && checkedCurrentAll,\n        indeterminate: !checkedCurrentAll && checkedCurrentSome,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(!(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) === 'boolean'), 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref2) {\n              var nativeEvent = _ref2.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              setLastSelectedKey(key);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Columns\n\n\n    var selectionColumn = _defineProperty({\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n\n    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {\n      var _columns = _toArray(columns),\n          expandColumn = _columns[0],\n          restColumns = _columns.slice(1);\n\n      var selectionFixed = fixed || getFixedType(restColumns[0]);\n\n      if (selectionFixed) {\n        expandColumn.fixed = selectionFixed;\n      }\n\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: selectionFixed\n      })].concat(_toConsumableArray(restColumns));\n    }\n\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}